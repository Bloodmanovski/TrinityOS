/**
 * Copyright (c) 2014 Trinix Foundation. All rights reserved.
 * 
 * This file is part of Trinix Operating System and is released under Trinix 
 * Public Source Licence Version 0.1 (the 'Licence'). You may not use this file
 * except in compliance with the License. The rights granted to you under the
 * License may not be used to create, or enable the creation or redistribution
 * of, unlawful or unlicensed copies of an Trinix operating system, or to
 * circumvent, violate, or enable the circumvention or violation of, any terms
 * of an Trinix operating system software license agreement.
 * 
 * You may obtain a copy of the License at
 * http://pastebin.com/raw.php?i=ADVe2Pc7 and read it before using this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 * KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 * 
 * Contributors:
 *      Matsumoto Satoshi <satoshi@gshost.eu>
 */

module Library.LibraryLoader;

import Library;


abstract class LibraryLoader {
	private __gshared LinkedList!LibraryLoader _libraries;

	private string _name;
	protected void* _base;

	protected bool CheckMagic();
	protected void* Relocate(string[] args);
	protected bool GetSymbol(string name, ref void* ret, ref long size);

	protected this(/* atring searchDir, string[] args*/) {
		_libraries.Add(this);
	}

	protected ~this() {
		_libraries.Remove(this);
	}




	static LibraryLoader Load(string name, string searchDir, string[] args) {

		//relocate...
		//if ok _libra..Add...
		return null;
	}

	static LibraryLoader Find(string name) {
		foreach (x; _libraries) {
			if (x.Value._name == name)
				return x.Value;
		}

		return null;
	}

	static bool GetSymbol(string name, ref void* value, ref long size, void* ignoreBase) {
		//Local exports...

		foreach(x; _libraries) {
			if (x.Value._base == ignoreBase)
				continue;

			if (x.Value.GetSymbol(name, value, size))
				return true;
		}

		return false;
	}
}